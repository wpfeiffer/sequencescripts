#!/usr/bin/perl
# identify-species picks the best match between each contig of a sample and sequences in a genome database based upon a prior BLAST alignment.
# It then outputs the total number of contigs and the matching length by species above and below a specified identity threshold.
#
# The BLAST output, which is input to identify-species, is assumed to have been generated by the following command:
# 
# blastn -num_threads 16 -query <sample>.fasta -db <database> -max_target_seqs 1 -outfmt '6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send stitle' -out <sample>.vs.<database>.out
#
# Input parameters are as follows:
# sample is the ID of the sample used for output.
# threshold is the value in percent used for binning by identity; 
# identities â‰¥ $threshold are considered good, while those < $threshold are poor.
#
use Getopt::Long;
$sample = xx-xxx;
$threshold = 95;
GetOptions ("sample=s" => \$sample,
            "threshold=i" => \$threshold);
$contig_id_good = " ";
$contig_id_poor = " ";
while (<>) {
  @fields = split;
  $identity = $fields[2];
  $length = $fields[3];
  $genus = $fields[10];
  $species = $fields[11];
  if ($species eq "sp.") { $species = $fields[12]; }
  if ($species =~ /,$/) { chop $species; }
  $name = join " ", $genus, $species;
  if ($identity >= $threshold) {
    if ($fields[0] ne $contig_id_good) { $count_good{$name}++; }
    $length_good{$name} += $length;
    $contig_id_good = $fields[0];
  } else {
    if ($fields[0] ne $contig_id_poor) { $count_poor{$name}++; }
    $length_poor{$name} += $length;
    $contig_id_poor = $fields[0];
  }
}
print "\n    Sample  Count   Length  Species for contigs with >= $threshold% identity\n";
foreach $name (reverse sort { $length_good{$a} <=> $length_good{$b} } keys %length_good) {
  printf "%10s  %5d  %7d  %s\n", $sample, $count_good{$name}, $length_good{$name}, $name;
}
print "\n    Sample  Count   Length  Species for contigs with < $threshold% identity\n";
foreach $name (reverse sort { $length_poor{$a} <=> $length_poor{$b} } keys %length_poor) {
  printf "%10s  %5d  %7d  %s\n", $sample, $count_poor{$name}, $length_poor{$name}, $name;
}
