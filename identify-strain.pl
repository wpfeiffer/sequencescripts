#!/usr/bin/perl
# identify-strain picks the best match between each contig of a sample and sequences in a genome database baseupon a prior BLAST alignment.
# It then outputs the total number of contigs and the matching length by strain above and below a specified identity threshold.
#
# The BLAST output, which is input to identify-strain, is assumed to have been generated by the following command:
#
# blastn -num_threads 16 -query <sample>.fasta -db <database> -max_target_seqs 1 -outfmt '6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send stitle' -out <sample>.vs.<database>.out
#
# $sample is the ID of the sample used for output.
# $threshold is the value in percent used for binning by matching identity;
# identities â‰¥ $threshold are considered good, while those < $threshold are poor.
#
#
use Getopt::Long;
$sample = xx-xxx;
$threshold = 95;
GetOptions ("sample=s" => \$sample,
            "threshold=i" => \$threshold);
$contig_id_good = " ";
$contig_id_poor = " ";
while (<>) {
  @fields = split;
  $identity = $fields[2];
  $length = $fields[3];
  $genus = $fields[10];
  $species = $fields[11];
  $strain1 = $fields[12];
  $strain2 = $fields[13];
  $strain3 = $fields[14];
  $strain4 = $fields[15];
  $strain5 = $fields[16];
  $strain6 = $fields[17];
  if ($species eq "sp.") {
    $species = $strain1;
    $strain1 = $strain2;
    $strain2 = $strain3;
    $strain3 = $strain4;
    $strain4 = $strain5;
    $strain5 = $strain6;
  }
  if ($species =~ /,$/) { chop $species; }
  if ($strain3 eq "str.") {
    $strain3 = $strain4;
    $strain4 = $strain5;
  }
  $name = join " ", $genus, $species;
  $done = 0;
  if (!($strain1 =~ /complete/) && !($strain1 =~ /whole/) && !($strain1 =~ /WGS/) && !($strain1 =~ /cont/) && !($strain1 =~ /ctg/) && !($strain1 =~ /cntg/) && !($strain1 =~ /CTG/) && !($strain1 =~ /Cont/) && !($strain1 =~ /scaf/) && !($strain1 =~ /Scaf/) && !($strain1 =~ /NODE/)) {
    $name = join " ", $name, $strain1;
  } else { $done = 1; }
  if (($done == 0) && !($strain2 =~ /complete/) && !($strain2 =~ /whole/) && !($strain2 =~ /WGS/) && !($strain2 =~ /cont/) && !($strain2 =~ /ctg/) && !($strain2 =~ /cntg/) && !($strain2 =~ /CTG/) && !($strain2 =~ /Cont/) && !($strain2 =~ /scaf/) && !($strain2 =~ /Scaf/)  && !($strain2 =~ /NODE/)) {
    $name = join " ", $name, $strain2;
  } else { $done = 1; }
  if (($done == 0) && !($strain3 =~ /complete/) && !($strain3 =~ /whole/) && !($strain3 =~ /WGS/) && !($strain3 =~ /cont/) && !($strain3 =~ /ctg/) && !($strain3 =~ /cntg/) && !($strain3 =~ /CTG/) && !($strain3 =~ /Cont/) && !($strain3 =~ /scaf/) && !($strain3 =~ /Scaf/)  && !($strain3 =~ /NODE/)) {
    $name = join " ", $name, $strain3;
  } else { $done = 1; }
  if (($done == 0) && !($strain4 =~ /complete/) && !($strain4 =~ /whole/) && !($strain4 =~ /WGS/) && !($strain4 =~ /cont/) && !($strain4 =~ /ctg/) && !($strain4 =~ /cntg/) && !($strain4 =~ /CTG/) && !($strain4 =~ /Cont/) && !($strain4 =~ /scaf/) && !($strain4 =~ /Scaf/)  && !($strain4 =~ /NODE/)) {
    $name = join " ", $name, $strain4;
  }
  if ($identity >= $threshold) {
    if ($fields[0] ne $contig_id_good) { $count_good{$name}++; }
    $length_good{$name} += $length;
    $contig_id_good = $fields[0];
  } else {
    if ($fields[0] ne $contig_id_poor) { $count_poor{$name}++; }
    $length_poor{$name} += $length;
    $contig_id_poor = $fields[0];
  }
}
print "\n    Sample  Count   Length  Species for contigs with >= $threshold% identity\n";
foreach $name (reverse sort { $length_good{$a} <=> $length_good{$b} } keys %length_good) {
  printf "%10s  %5d  %7d  %s\n", $sample, $count_good{$name}, $length_good{$name}, $name;
}
print "\n    Sample  Count   Length  Species for contigs with < $threshold% identity\n";
foreach $name (reverse sort { $length_poor{$a} <=> $length_poor{$b} } keys %length_poor) {
  printf "%10s  %5d  %7d  %s\n", $sample, $count_poor{$name}, $length_poor{$name}, $name;
}
